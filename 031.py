# Algoritmo 031
# Quick Sort - Algoritmo de ordena√ß√£o r√°pida

""" Com base no piv√¥ e considerando uma ordena√ß√£o crescente, o algoritmo
compara todos os valores que est√£o √† esquerda dele, verificado se eles s√£o
menores que o piv√¥. Em seguida, s√£o comparados todos os valores que est√£o √†
direita do piv√¥, verificando se eles s√£o maiores que o valor de refer√™ncia do piv√¥.
Sempre que um valor maior que o piv√¥ √© encontrado do lado esquerdo e/ou um
valor menor √© achado do lado direito, ambos trocam de posi√ß√£o (swap). 
complexidade ùëÇ(ùëõ¬≤)
"""

vetor = [6, 1, 8, 2, 7]

def troca(vetor, i, j):
    # Troca os elementos de posi√ß√£o i e j
    aux = vetor[i]
    vetor[i] = vetor[j]
    vetor[j] = aux

def particao(vetor, inicio, fim):
    # Escolhe o elemento do meio como piv√¥
    meio = (inicio + fim) // 2
    pivo = vetor[meio]
    # Coloca o piv√¥ na posi√ß√£o inicial temporariamente
    troca(vetor, inicio, meio)
    i = inicio + 1
    j = fim

    while True:
        # Encontra o primeiro elemento √† direita que √© menor ou igual ao piv√¥
        while i <= j and vetor[i] <= pivo:
            i += 1
        # Encontra o primeiro elemento √† esquerda que √© maior ou igual ao piv√¥
        while i <= j and vetor[j] >= pivo:
            j -= 1
        if i <= j:
            # Troca elementos incoerentes
            troca(vetor, i, j)
        else:
            # Coloca o piv√¥ na posi√ß√£o correta
            troca(vetor, inicio, j)
            return j

# Quick sort crescente
def quick_sort(vetor, inicio=0, fim=None):
    if fim is None:
        fim = len(vetor) - 1

    if inicio < fim:
        div = particao(vetor, inicio, fim)  # Particiona o vetor
        quick_sort(vetor, inicio, div - 1)  # Ordena a primeira metade
        quick_sort(vetor, div + 1, fim)  # Ordena a segunda metade

# Ordena o vetor
quick_sort(vetor)

# Imprime o vetor ordenado
for i in range(len(vetor)):
    print(vetor[i], end=' ')
