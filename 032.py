# Algoritmo 032
# Algoritmo de busca 

#busca sequ칡ncial -> complexidade 洧녝(洧녵) - exemplos da aula de estrutura de dados

#import random

# Valores n칚o ordenados
buscado = 34
vetor = [6, 1, 8, 2, 7, 10, 34, 0]

# Easy way in Python!! 2 linhas
# if buscado in vetor:
#     print("N칰mero encontrado!")

for i in range (len(vetor)): # busca sequencial
    print(f"posi칞칚o {i} = {vetor[i]}")
    if vetor[i] == buscado:
        print(f"Valor encontrado na posi칞칚o:  {i}")
        break
    else:
        print("Valor n칚o encontrado")
        

# Valores ordenados - > complexidade 洧녝(洧녵) - forma ilustrativa (n칚o o melhor c칩digo de python)
buscado = int(input("Escolha um n칰mero de 1 a 10: "))
achou = 0
# numeros = list(random.sample(range(1, 100), 10)) # gera uma lista de 10 n칰meos aleat칩rios entre 1 e 99
x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
i = 0
tamanho_do_vetor = len(x)

while i <= tamanho_do_vetor and achou == 0 and buscado >= x[i]:
    if x[i] == buscado:
        achou = 1
    else:
        i += 1
    if achou == 0:
        print(f"Valor N츾O encontrado na posi칞칚o: {i}")
    else:
        print(f"Valor encontrado na posi칞칚o: {i + 1}" )
        
       
# Busca Bin치ria - > complexidade 洧녝(洧녳洧녶洧녮洧녵) - s칩 funciona com o vetor ordenado
buscado = int(input("Escolha um n칰mero: "))

x = [i for i in range(1, 11)] # lista de 1 a 10
inicio = 0
fim = len(x) - 1
achou = 0

while inicio <= fim and achou == 0:
    meio = (inicio + fim) // 2  # C치lculo de 'meio' dentro do loop
        
    if x[meio] == buscado:
        achou = 1 
    else:
        if buscado < x[meio]:
            fim = meio - 1
        else:
            inicio = meio + 1
                                 
if achou == 0:
    print("Valor n칚o encontrado!")
else:
    print(f"Valor encontrado na posi칞칚o {meio}")
        




        